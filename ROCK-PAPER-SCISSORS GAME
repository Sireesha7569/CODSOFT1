import random

def get_computer_choice():
    """Generate a random choice for the computer."""
    choices = ['r', 'p', 's']
    return random.choice(choices)

def determine_winner(user_choice, computer_choice):
    """Determine the winner of the game based on the choices."""
    if user_choice == computer_choice:
        return 'tie'
    elif (user_choice == 'r' and computer_choice == 's') or \
         (user_choice == 's' and computer_choice == 'p') or \
         (user_choice == 'p' and computer_choice == 'r'):
        return 'win'
    else:
        return 'lose'

def display_result(user_choice, computer_choice, result):
    """Display the result of the game."""
    print(f"\nYour choice: {user_choice}")
    print(f"Computer's choice: {computer_choice}")
    if result == 'tie':
        print("It's a tie!")
    elif result == 'win':
        print("Congratulations! You win")
    else:
        print("Sorry, you lose")

def main():
    """Main function to run the Rock-Paper-Scissors game."""
    user_score = 0
    computer_score = 0
    play_again = True

    while play_again:
        print("\nRock, Paper, Scissors Game!")
        user_choice = input("Enter your choice (r, p, or s): ").lower()

        # Validate user input
        while user_choice not in ['r', 'p', 's']:
            print("Invalid choice. Please choose rock, paper, or scissors.")
            user_choice = input("Enter your choice (r, p, or s): ").lower()

        computer_choice = get_computer_choice()
        result = determine_winner(user_choice, computer_choice)
        
        display_result(user_choice, computer_choice, result)
        
        if result == 'win':
            user_score += 1
        elif result == 'lose':
            computer_score += 1
        
        print(f"\nScore - You: {user_score}, Computer: {computer_score}")
        
        play_again = input("\nDo you want to play again? (yes/no): ").lower() == 'yes'

    print("\nThanks for playing! Final Score:")
    print(f"You: {user_score}, Computer: {computer_score}")

if __name__ == "__main__":
    main()
